renderPlot({
x_axis <- input$var1
y_axis <- input$var2
color <- "Cut"
a<-ggplot(diamonds, aes_string(x = x_axis, y = y_axis, color=cut)) +
geom_point() + facet_wrap(~Cut) + ggtitle("Plot of carat vs. price")
ggplotly(a)
})
library(ggplot2)
diamonds<-diamonds
inputPanel(
selectInput("var1", label = "Choose Xaxis:", choices = colnames, selected = colnames[3]
),
selectInput("var2",  label = "Choose Yaxis:",
choices = colnames, selected = colnames[4]
)
)
library(plotly)
renderPlot({
x_axis <- input$var1
y_axis <- input$var2
color <- "Cut"
a<-ggplot(diamonds, aes_string(x = x_axis, y = y_axis, color=cut)) +
geom_point() + facet_wrap(~Cut) + ggtitle("Plot of carat vs. price")
ggplotly(a)
})
View(diamond)
View(diamonds)
View(diamonds)
names(diamonds)
View(diamonds)
answerQ2<-ggplot(diamonds, aes(x = carat, y = price, color = clarity)) + geom_point() + facet_wrap(~cut) + ggtitle("Plot of Carat vs. Price")
return(answerQ2)
answerQ2<-ggplot(diamonds, aes(x = carat, y = price, color = clarity)) + geom_point() + facet_wrap(~cut) + ggtitle("Plot of Carat vs. Price")
return(answerQ2)
library(ggplot2)
diamonds<-diamonds
inputPanel(
selectInput("var1", label = "Choose Xaxis:", choices = c("carat","cut","cla"), selected = "Petal.Length"),
selectInput("var2",  label = "Choose Yaxis:",
choices = colnames, selected = colnames[4]
)
library(plotly)
summary(diamonds)
renderPlot({
x_axis <- input$var1
y_axis <- input$var2
color <- "Color"
a<-ggplot(diamonds, aes_string(x = x_axis, y = y_axis, color = color)) +
geom_point() + facet_wrap(~Color) + ggtitle("Plot of carat vs. price")
ggplotly(a)
})
library(plotly)
summary(diamonds)
renderPlot({
x_axis <- input$var1
y_axis <- input$var2
color <- "Color"
a<-ggplot(diamonds, aes_string(x = x_axis, y = y_axis, color = color)) +
geom_point() + facet_wrap(~Color) + ggtitle("Plot of carat vs. price")
ggplotly(a)
})
library(plotly)
summary(diamonds)
renderPlot({
x_axis <- input$var1
y_axis <- input$var2
color <- "Color"
a<-ggplot(diamonds, aes_string(x = x_axis, y = y_axis, color = color)) +
geom_point() + facet_wrap(~Color) + ggtitle("Plot of carat vs. price")
ggplotly(a)
})
library(ggplot2)
diamonds<-diamonds
inputPanel(
selectInput("var1", label = "Choose Xaxis:", choices = c("carat","cut"), selected = "cut"),
selectInput("var2",  label = "Choose Yaxis:", choices = c("price","depth"), selected = "depth")
)
)
library(ggplot2)
diamonds<-diamonds
inputPanel(
selectInput("var1", label = "Choose Xaxis:", choices = c("carat","cut"), selected = "cut"),
selectInput("var2",  label = "Choose Yaxis:", choices = c("price","depth"), selected = "depth")
)
inputPanel(
selectInput("var1", label = "Choose Xaxis:", choices = c("carat","cut"), selected = "cut"),
selectInput("var2",  label = "Choose Yaxis:", choices = c("price","clarity"), selected = "clarity")
)
library(plotly)
renderPlotly({
x_axis <- input$var1
y_axis <- input$var2
species <- "color"
a<-ggplot(diamonds, aes_string(x = x_axis, y = y_axis, color=species)) + geom_point() + facet_wrap(~color) + ggtitle("Plot of carat vs. price")
ggplotly(a)
})
library(plotly)
renderPlotly({
x_axis <- input$var1
y_axis <- input$var2
a<-ggplot(diamonds, aes_string(x = x_axis, y = y_axis, color=species)) + geom_point() + facet_wrap(~color) + ggtitle("Plot of carat vs. price")
ggplotly(a)
})
library(plotly)
renderPlotly({
x_axis <- input$var1
y_axis <- input$var2
a<-ggplot(diamonds, aes_string(x = x_axis, y = y_axis, color=color)) + geom_point() + facet_wrap(~color) + ggtitle("Plot of carat vs. price")
ggplotly(a)
})
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
renderPlotly({
x_axis <- input$var1
y_axis <- input$var2
colors <- "color"
a<-ggplot(diamonds, aes_string(x = x_axis, y = y_axis, color=colors)) + geom_point() + facet_wrap(~colors) + ggtitle("Plot of carat vs. price")
ggplotly(a)
})
library(plotly)
renderPlotly({
x_axis <- input$var1
y_axis <- input$var2
colors <- "color"
a<-ggplot(diamonds, aes_string(x = x_axis, y = y_axis, color=colors)) + geom_point() + facet_wrap(~colors) + ggtitle("Plot of carat vs. price")
ggplotly(a)
})
knitr::opts_chunk$set(echo = TRUE)
inputPanel(
selectInput("var1", label = "Choose Xaxis:", choices = c("Sepal.Length","Petal.Length"), selected = "Petal.Length"),
selectInput("var2",  label = "Choose Yaxis:", choices = c("Sepal.Width","Petal.Width"), selected = "Petal.Width")
)
library(plotly)
renderPlotly({
x_axis <- input$var1
y_axis <- input$var2
species <- "Species"
a<-ggplot(iris, aes_string(x = x_axis, y = y_axis, color=species)) + geom_point() + facet_wrap(~Species) + ggtitle("Plot of sepal length vs. petal length")
ggplotly(a)
})
inputPanel(
selectInput("var1", label = "Choose Xaxis:", choices = c("carat","cut"), selected = "cut"),
selectInput("var2",  label = "Choose Yaxis:", choices = c("price","clarity"), selected = "clarity")
)
library(plotly)
renderPlotly({
x_axis <- input$var1
y_axis <- input$var2
colors <- "color"
a<-ggplot(diamonds, aes_string(x = x_axis, y = y_axis, color=colors)) + geom_point() + facet_wrap(~colors) + ggtitle("Plot of carat vs. price")
ggplotly(a)
})
knitr::opts_chunk$set(echo = TRUE)
inputPanel(
selectInput("var1", label = "Choose Xaxis:", choices = c("carat","cut"), selected = "cut"),
selectInput("var2",  label = "Choose Yaxis:", choices = c("price","clarity"), selected = "clarity")
)
library(plotly)
renderPlotly({
x_axis <- input$var1
y_axis <- input$var2
colors <- "color"
a<-ggplot(diamonds, aes_string(x = x_axis, y = y_axis, color=colors)) + geom_point() + facet_wrap(~colors) + ggtitle("Plot of carat vs. price")
ggplotly(a)
})
dt1<-data.frame(gene_rna_expression_tpms$gene)
dt1$medianTPM<-rowMedians(1, gene_rna_expression_tpms[,c(4:ncol(gene_rna_expression_tpms))], na.rm = FALSE, dim. = dim(1),
...)
dt1<-data.frame(gene_rna_expression_tpms$gene)
dt1$medianTPM<-rowMedians(gene_rna_expression_tpms), na.rm = FALSE,
...)
library(shiny)
library(DT)
shinyApp(
ui=
fluidPage(
fluidRow(
column(12,DT::dataTableOutput('tbl_b'))
)
),
server=
function(input, output, session) {
output$tbl_b <- DT::renderDataTable(gene_rna_expression_tpms,options = list( server = TRUE,
searching = TRUE,
sortable = TRUE,
order = c(1, 'asc')
)
)
}
)
mydt<-data.frame(gene_rna_expression_tpms$gene)
mydt$meanTPM<-rowMeans(gene_rna_expression_tpms[,c(4:ncol(gene_rna_expression_tpms))], na.rm = FALSE, dims = 1);
View(iris_mean)
View(df_mean)
dt1<-data.frame(gene_rna_expression_tpms$gene)
m <- (gene_rna_expression_tpms[,c(4:ncol(gene_rna_expression_tpms))])
rowMedians(m, na.rm = FALSE)
dt1$medianTPM<-rowMeans(m)
find("rowMedians")
install.packages(matrixStats)
dt1<-data.frame(gene_rna_expression_tpms$gene)
apply(dt1[,-1],1,median)
dt1<-data.frame(gene_rna_expression_tpms$gene)
apply(dt1[,-1],1,median)
dt1<-data.frame(gene_rna_expression_tpms$gene)
apply(dt1[,-1],1,median)
library(shiny)
library(DT)
shinyApp(
ui=
fluidPage(
fluidRow(
column(12,DT::dataTableOutput('tbl1'))
)
),
server=
function(input, output, session) {
output$tbl1 <- DT::renderDataTable(gene_rna_expression_tpms,options = list( server = TRUE,
searching = TRUE,
sortable = TRUE,
order = c(1, 'asc')
)
)
}
)
dt1<-data.frame(gene_rna_expression_tpms$gene)
apply(dt1[,-1],1,median)
mean_petal_length <- mean(iris$'Petal.Length')
mean_petal_length
max_petal_length <- max(iris$'Petal.Length')
max_petal_length
mean_petal_length <- mean(iris$'Petal.Length')
mean_petal_length
max_petal_length <- max(iris$'Petal.Length')
max_petal_length
ncol(iris)
names(iris)
apply(dt1[,c(4:ncol(gene_rna_expression_tpms))],1, median, na.rm = FALSE)
dt1<-data.frame(gene_rna_expression_tpms$gene)
mydt<-data.frame(gene_rna_expression_tpms$gene)
mydt$meanTPM<-rowMeans(gene_rna_expression_tpms[,c(4:ncol(gene_rna_expression_tpms))], na.rm = FALSE, dims = 1);
library('dplyr')
gene_rna_expression_tpms<-inner_join(gene_id2gene,rna_expression_tpms)
gene_id2gene <- read.delim2('data/gene_id2gene.tsv.gz',header = TRUE, sep = "\t", row.names = NULL)
knitr::opts_chunk$set(echo = TRUE)
library('rmarkdown')
library("ggplot2")
library("plotly")
library("DT")
diamonds<-diamonds
iris<-iris
summary(iris)
# Calculates the mean values for the aggregates given by the Species column in the iris data set.
iris_mean <- aggregate(iris[,1:4], by=list(Species=iris$Species), FUN=mean)
# Calculates the standard deviations for the aggregates given by the Species column in the iris data set.
iris_sd <- aggregate(iris[,1:4], by=list(Species=iris$Species), FUN=sd)
convertDF <- function(df=df, mycolnames=c("Species", "Values", "Samples")) { myfactor <- rep(colnames(df)[-1], each=length(df[,1]));
# Defines function to convert data frames into ggplot2-friendly format.
mydata <- as.vector(as.matrix(df[,-1])); df <- data.frame(df[,1], mydata, myfactor); colnames(df) <- mycolnames; return(df) }
# Converts iris_mean.
df_mean <- convertDF(iris_mean, mycolnames=c("Species", "Values", "Samples"))
# Converts iris_sd.
df_sd <- convertDF(iris_sd, mycolnames=c("Species", "Values", "Samples"))
# Define standard deviation limits.
limits <- aes(ymax = df_mean[,2] + df_sd[,2], ymin=df_mean[,2] - df_sd[,2])
dir.create('images')
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
png('images/twovectors.png')
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
dev.off()
example1 <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point(aes(color = Species), size=4)
return(example1)
knitr::opts_chunk$set(echo = TRUE)
library('rmarkdown')
library("ggplot2")
library("plotly")
library("DT")
diamonds<-diamonds
iris<-iris
summary(iris)
# Calculates the mean values for the aggregates given by the Species column in the iris data set.
iris_mean <- aggregate(iris[,1:4], by=list(Species=iris$Species), FUN=mean)
# Calculates the standard deviations for the aggregates given by the Species column in the iris data set.
iris_sd <- aggregate(iris[,1:4], by=list(Species=iris$Species), FUN=sd)
convertDF <- function(df=df, mycolnames=c("Species", "Values", "Samples")) { myfactor <- rep(colnames(df)[-1], each=length(df[,1]));
# Defines function to convert data frames into ggplot2-friendly format.
mydata <- as.vector(as.matrix(df[,-1])); df <- data.frame(df[,1], mydata, myfactor); colnames(df) <- mycolnames; return(df) }
# Converts iris_mean.
df_mean <- convertDF(iris_mean, mycolnames=c("Species", "Values", "Samples"))
# Converts iris_sd.
df_sd <- convertDF(iris_sd, mycolnames=c("Species", "Values", "Samples"))
# Define standard deviation limits.
limits <- aes(ymax = df_mean[,2] + df_sd[,2], ymin=df_mean[,2] - df_sd[,2])
dir.create('images')
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
png('images/twovectors.png')
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
dev.off()
example1 <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point(aes(color = Species), size=4)
return(example1)
knitr::opts_chunk$set(echo = TRUE)
library('rmarkdown')
library("ggplot2")
library("plotly")
library("DT")
diamonds<-diamonds
iris<-iris
summary(iris)
# Calculates the mean values for the aggregates given by the Species column in the iris data set.
iris_mean <- aggregate(iris[,1:4], by=list(Species=iris$Species), FUN=mean)
# Calculates the standard deviations for the aggregates given by the Species column in the iris data set.
iris_sd <- aggregate(iris[,1:4], by=list(Species=iris$Species), FUN=sd)
convertDF <- function(df=df, mycolnames=c("Species", "Values", "Samples")) { myfactor <- rep(colnames(df)[-1], each=length(df[,1]));
# Defines function to convert data frames into ggplot2-friendly format.
mydata <- as.vector(as.matrix(df[,-1])); df <- data.frame(df[,1], mydata, myfactor); colnames(df) <- mycolnames; return(df) }
# Converts iris_mean.
df_mean <- convertDF(iris_mean, mycolnames=c("Species", "Values", "Samples"))
# Converts iris_sd.
df_sd <- convertDF(iris_sd, mycolnames=c("Species", "Values", "Samples"))
# Define standard deviation limits.
limits <- aes(ymax = df_mean[,2] + df_sd[,2], ymin=df_mean[,2] - df_sd[,2])
dir.create('images')
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
png('images/twovectors.png')
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
dev.off()
example1 <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point(aes(color = Species), size=4)
return(example1)
knitr::opts_chunk$set(echo = TRUE)
library('rmarkdown')
library("ggplot2")
library("plotly")
library("DT")
diamonds<-diamonds
iris<-iris
summary(iris)
# Calculates the mean values for the aggregates given by the Species column in the iris data set.
iris_mean <- aggregate(iris[,1:4], by=list(Species=iris$Species), FUN=mean)
# Calculates the standard deviations for the aggregates given by the Species column in the iris data set.
iris_sd <- aggregate(iris[,1:4], by=list(Species=iris$Species), FUN=sd)
convertDF <- function(df=df, mycolnames=c("Species", "Values", "Samples")) { myfactor <- rep(colnames(df)[-1], each=length(df[,1]));
# Defines function to convert data frames into ggplot2-friendly format.
mydata <- as.vector(as.matrix(df[,-1])); df <- data.frame(df[,1], mydata, myfactor); colnames(df) <- mycolnames; return(df) }
# Converts iris_mean.
df_mean <- convertDF(iris_mean, mycolnames=c("Species", "Values", "Samples"))
# Converts iris_sd.
df_sd <- convertDF(iris_sd, mycolnames=c("Species", "Values", "Samples"))
# Define standard deviation limits.
limits <- aes(ymax = df_mean[,2] + df_sd[,2], ymin=df_mean[,2] - df_sd[,2])
dir.create('images')
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
png('images/twovectors.png')
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
dev.off()
example1 <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point(aes(color = Species), size=4)
return(example1)
knitr::opts_chunk$set(echo = TRUE)
library('rmarkdown')
library("ggplot2")
library("plotly")
library("DT")
diamonds<-diamonds
iris<-iris
summary(iris)
# Calculates the mean values for the aggregates given by the Species column in the iris data set.
iris_mean <- aggregate(iris[,1:4], by=list(Species=iris$Species), FUN=mean)
# Calculates the standard deviations for the aggregates given by the Species column in the iris data set.
iris_sd <- aggregate(iris[,1:4], by=list(Species=iris$Species), FUN=sd)
convertDF <- function(df=df, mycolnames=c("Species", "Values", "Samples")) { myfactor <- rep(colnames(df)[-1], each=length(df[,1]));
# Defines function to convert data frames into ggplot2-friendly format.
mydata <- as.vector(as.matrix(df[,-1])); df <- data.frame(df[,1], mydata, myfactor); colnames(df) <- mycolnames; return(df) }
# Converts iris_mean.
df_mean <- convertDF(iris_mean, mycolnames=c("Species", "Values", "Samples"))
# Converts iris_sd.
df_sd <- convertDF(iris_sd, mycolnames=c("Species", "Values", "Samples"))
# Define standard deviation limits.
limits <- aes(ymax = df_mean[,2] + df_sd[,2], ymin=df_mean[,2] - df_sd[,2])
dir.create('images')
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
png('images/twovectors.png')
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
dev.off()
example1 <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point(aes(color = Species), size=4)
return(example1)
knitr::opts_chunk$set(echo = TRUE)
library('rmarkdown')
library("ggplot2")
library("plotly")
library("DT")
diamonds<-diamonds
iris<-iris
summary(iris)
# Calculates the mean values for the aggregates given by the Species column in the iris data set.
iris_mean <- aggregate(iris[,1:4], by=list(Species=iris$Species), FUN=mean)
# Calculates the standard deviations for the aggregates given by the Species column in the iris data set.
iris_sd <- aggregate(iris[,1:4], by=list(Species=iris$Species), FUN=sd)
convertDF <- function(df=df, mycolnames=c("Species", "Values", "Samples")) { myfactor <- rep(colnames(df)[-1], each=length(df[,1]));
# Defines function to convert data frames into ggplot2-friendly format.
mydata <- as.vector(as.matrix(df[,-1])); df <- data.frame(df[,1], mydata, myfactor); colnames(df) <- mycolnames; return(df) }
# Converts iris_mean.
df_mean <- convertDF(iris_mean, mycolnames=c("Species", "Values", "Samples"))
# Converts iris_sd.
df_sd <- convertDF(iris_sd, mycolnames=c("Species", "Values", "Samples"))
# Define standard deviation limits.
limits <- aes(ymax = df_mean[,2] + df_sd[,2], ymin=df_mean[,2] - df_sd[,2])
dir.create('images')
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
png('images/twovectors.png')
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
dev.off()
example1 <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point(aes(color = Species), size=4)
return(example1)
knitr::opts_chunk$set(echo = TRUE)
library('rmarkdown')
library("ggplot2")
library("plotly")
library("DT")
diamonds<-diamonds
iris<-iris
summary(iris)
# Calculates the mean values for the aggregates given by the Species column in the iris data set.
iris_mean <- aggregate(iris[,1:4], by=list(Species=iris$Species), FUN=mean)
# Calculates the standard deviations for the aggregates given by the Species column in the iris data set.
iris_sd <- aggregate(iris[,1:4], by=list(Species=iris$Species), FUN=sd)
convertDF <- function(df=df, mycolnames=c("Species", "Values", "Samples")) { myfactor <- rep(colnames(df)[-1], each=length(df[,1]));
# Defines function to convert data frames into ggplot2-friendly format.
mydata <- as.vector(as.matrix(df[,-1])); df <- data.frame(df[,1], mydata, myfactor); colnames(df) <- mycolnames; return(df) }
# Converts iris_mean.
df_mean <- convertDF(iris_mean, mycolnames=c("Species", "Values", "Samples"))
# Converts iris_sd.
df_sd <- convertDF(iris_sd, mycolnames=c("Species", "Values", "Samples"))
# Define standard deviation limits.
limits <- aes(ymax = df_mean[,2] + df_sd[,2], ymin=df_mean[,2] - df_sd[,2])
dir.create('images')
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
png('images/twovectors.png')
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
dev.off()
example1 <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point(aes(color = Species), size=4)
return(example1)
knitr::opts_chunk$set(echo = TRUE)
library('rmarkdown')
library("ggplot2")
library("plotly")
library("DT")
diamonds<-diamonds
iris<-iris
summary(iris)
# Calculates the mean values for the aggregates given by the Species column in the iris data set.
iris_mean <- aggregate(iris[,1:4], by=list(Species=iris$Species), FUN=mean)
# Calculates the standard deviations for the aggregates given by the Species column in the iris data set.
iris_sd <- aggregate(iris[,1:4], by=list(Species=iris$Species), FUN=sd)
convertDF <- function(df=df, mycolnames=c("Species", "Values", "Samples")) { myfactor <- rep(colnames(df)[-1], each=length(df[,1]));
# Defines function to convert data frames into ggplot2-friendly format.
mydata <- as.vector(as.matrix(df[,-1])); df <- data.frame(df[,1], mydata, myfactor); colnames(df) <- mycolnames; return(df) }
# Converts iris_mean.
df_mean <- convertDF(iris_mean, mycolnames=c("Species", "Values", "Samples"))
# Converts iris_sd.
df_sd <- convertDF(iris_sd, mycolnames=c("Species", "Values", "Samples"))
# Define standard deviation limits.
limits <- aes(ymax = df_mean[,2] + df_sd[,2], ymin=df_mean[,2] - df_sd[,2])
dir.create('images')
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
png('images/twovectors.png')
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
dev.off()
example1 <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point(aes(color = Species), size=4)
return(example1)
knitr::opts_chunk$set(echo = TRUE)
library('rmarkdown')
library("ggplot2")
library("plotly")
library("DT")
diamonds<-diamonds
iris<-iris
summary(iris)
# Calculates the mean values for the aggregates given by the Species column in the iris data set.
iris_mean <- aggregate(iris[,1:4], by=list(Species=iris$Species), FUN=mean)
# Calculates the standard deviations for the aggregates given by the Species column in the iris data set.
iris_sd <- aggregate(iris[,1:4], by=list(Species=iris$Species), FUN=sd)
convertDF <- function(df=df, mycolnames=c("Species", "Values", "Samples")) { myfactor <- rep(colnames(df)[-1], each=length(df[,1]));
# Defines function to convert data frames into ggplot2-friendly format.
mydata <- as.vector(as.matrix(df[,-1])); df <- data.frame(df[,1], mydata, myfactor); colnames(df) <- mycolnames; return(df) }
# Converts iris_mean.
df_mean <- convertDF(iris_mean, mycolnames=c("Species", "Values", "Samples"))
# Converts iris_sd.
df_sd <- convertDF(iris_sd, mycolnames=c("Species", "Values", "Samples"))
# Define standard deviation limits.
limits <- aes(ymax = df_mean[,2] + df_sd[,2], ymin=df_mean[,2] - df_sd[,2])
dir.create('images')
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
png('images/twovectors.png')
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
dev.off()
example1 <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point(aes(color = Species), size=4)
return(example1)
mydt<-data.frame(gene_rna_expression_tpms$gene)
rna_expression_tpms <- read.csv('data/cohort.tpms.csv.gz',header = TRUE, sep = ",",  quote = "\"", dec = ".", fill = TRUE, row.names = NULL)
setwd
setwd(dir = 'assignment3/')
setwd(dir = 'assignment3/')
rna_expression_tpms <- read.csv('data/cohort.tpms.csv.gz',header = TRUE, sep = ",",  quote = "\"", dec = ".", fill = TRUE, row.names = NULL)
list.dirs(path = '.')
list.dirs(path = './data')
list.dirs(path = './data/')
list.dirs(path = 'data/')
setwd(dir = '~/assignment3/')
rna_expression_tpms <- read.csv('data/cohort.tpms.csv.gz',header = TRUE, sep = ",",  quote = "\"", dec = ".", fill = TRUE, row.names = NULL)
mydt<-data.frame(gene_rna_expression_tpms$gene)
setwd(dir = '~/assignment3/')
rna_expression_tpms <- read.csv('data/cohort.tpms.csv.gz',header = TRUE, sep = ",",  quote = "\"", dec = ".", fill = TRUE, row.names = NULL)
